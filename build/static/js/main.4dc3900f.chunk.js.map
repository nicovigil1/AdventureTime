{"version":3,"sources":["components/Header.js","components/Login.js","components/Welcome.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","style","navStyle","React","Component","display","backgroundColor","justifyContent","color","paddingTop","paddingBottom","boxShadow","Login","getLogin","getLoginText","document","querySelector","value","url","concat","fetch","method","then","res","json","person","_this","props","getUser","Value","getLocation","postLocation","geoResponse","styleLogin","id","type","onClick","this","styleSubmit","flexDirection","textAlign","padding","background","borderRadius","marginTop","marginLeft","marginRight","Welcome","welcomeStyle","currentUser","username","current_hp","current_xp","console","log","centerQuest","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","toggleLoginDisplay","setState","loginDisplay","state","getCurrentUser","user","getCurrentLocation","navigator","geolocation","getCurrentPosition","location","loginInfo","styleBody","Header_Header","Login_Login","Welcome_Welcome","alignItems","height","backgroundImage","backgroundSize","Boolean","window","hostname","match","ReactDOM","render","src_App_0","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4dc3900f.chunk.js","sourcesContent":["import React from 'react'\n\nexport default class Header extends React.Component {\n  render () {\n    return(\n      <div style={navStyle}>\n        Welcome to AdventureTime\n      </div>\n    )\n  }\n}\n\nconst navStyle = {\n  display: \"flex\",\n  backgroundColor: \"#63b4f4\",\n  justifyContent: \"center\",\n  color: \"black\",\n  paddingTop: \".5em\",\n  paddingBottom: \".5em\",\n  boxShadow: \"0px 0px 10px 5px #000\"\n}","import React from 'react'\n\nexport default class Login extends React.Component {\n  getLogin = () => {\n    let getLoginText = document.querySelector(\"#textBox\").value\n    let url = `https://adventure-time-m4cap.herokuapp.com/api/v1/login?username=${getLoginText}`;\n    fetch(url, { method: \"POST\" })\n      .then(res => res.json())\n      .then(person => this.props.getUser(person.Value))\n      .then(this.props.display)\n      .then(this.props.getLocation) // .then(postLocation(this.props.getLocation))\n  }\n  postLocation = (geoResponse) => {\n    //fetch(`https://adventure-time-m4cap.herokuapp.com/locationEndpoint` {method: \"POST\", body: geoResponse})\n  }\n  render() {\n    return(\n      <div style={styleLogin}>\n        <p>Sign in Below!</p>\n        <input id=\"textBox\" type=\"text\"/>\n        <button onClick={this.getLogin} style={styleSubmit}>Login</button>\n      </div>\n    )\n  }\n}\n\n\nconst styleLogin = {\n  display: \"flex\", \n  flexDirection: \"column\",\n  textAlign: \"center\",\n  padding: \"2em\",\n  background: \"rgba(206, 215, 219, 0.96)\",\n  borderRadius: \"1em\"\n}\n\nconst styleSubmit = {\n  marginTop: \".4em\",\n  marginLeft: \"2em\",\n  marginRight: \"2em\"\n}","import React from 'react'\n\nexport default class Welcome extends React.Component {\n  render() {\n    return(\n      <div style={welcomeStyle}>\n        <h1>Hello {this.props.currentUser.username}!</h1>\n        <div>\n          <p>Your Stats</p>\n          <ul>\n            <li>Health: {this.props.currentUser.current_hp}</li>\n            <li>XP: {this.props.currentUser.current_xp}</li>\n            {console.log(this.props.currentUser)}\n          </ul>\n          <div style={centerQuest}>\n            <button>Start Quest!</button>\n            <button>Replenish Health</button>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nconst welcomeStyle = {\n  background: \"rgba(206, 215, 219, 0.96)\",\n  padding: \"1em\",\n  borderRadius: \"1em\"\n}\n\nconst centerQuest = {\n  display: \"flex\",\n  justifyContent: \"center\"\n}","import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport Header from './components/Header'\nimport Login from './components/Login'\nimport Welcome from './components/Welcome'\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      loginInfo: [],\n      loginDisplay: true,\n      currentUser: null,\n    }\n  }\n\n  toggleLoginDisplay = () => {\n    this.setState({loginDisplay: !this.state.loginDisplay})\n  }\n\n  getCurrentUser = (user) => {\n    this.setState({currentUser: user})\n  }\n\n  getCurrentLocation = () => {\n    navigator.geolocation.getCurrentPosition(location => { console.log(location) }) //(location => {return location})\n  }\n\n  render() {\n    return (\n      <div style={styleBody}>\n        < Header />\n        <div style={styleLogin}>\n          {this.state.loginDisplay && <Login display={this.toggleLoginDisplay} \n                                             getLocation={this.getCurrentLocation}\n                                             getUser={this.getCurrentUser}/>}\n          {!this.state.loginDisplay && <Welcome currentUser={this.state.currentUser} />}\n        </div>\n      </div>\n    );\n  }\n}\n\nconst styleLogin = {\n  display: \"flex\",\n  justifyContent: \"center\",\n  alignItems: \"center\",\n  height: \"80%\"\n}\n\nconst styleBody = {\n  height: \"100vh\",\n  backgroundImage: \"url('https://i.pinimg.com/736x/3c/1e/d3/3c1ed3034e801dcb19e06558501fd457.jpg')\",\n  backgroundSize: \"cover\"\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}